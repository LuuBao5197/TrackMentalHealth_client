import React, { useEffect, useState } from 'react';
import {
    getMoodStatistics,
    getMyMoodsPaged
} from '../../api/moodAPI';
import {
    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer
} from 'recharts';
import moment from 'moment';
import MentalAlertBox from '../../api/MentalAlertBox';

const MoodHistoryPage = () => {
    const [chartData, setChartData] = useState([]);
    const [aiAnalysis, setAiAnalysis] = useState('');
    const [filterRange, setFilterRange] = useState('7');

    const [pagedMoods, setPagedMoods] = useState([]);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(1);
    const pageSize = 5;

    useEffect(() => {
        const fetchChartData = async () => {
    const res = await getMoodStatistics();
    const raw = res.data;
    const now = moment();
    const days = filterRange === '7' ? 7 : 30;

    const filtered = Object.entries(raw).filter(([key]) => {
        const date = moment(key);
        return date.isAfter(now.clone().subtract(days, 'days'), 'day');
    });

    const formatted = filtered.map(([dateStr, value]) => ({
        rawDate: moment(dateStr),
        date: moment(dateStr).format("DD/MM"),
        count: value
    })).sort((a, b) => a.rawDate - b.rawDate);

    setChartData(formatted);

    const moodMap = {
        1: 'R·∫•t t·ªá', 2: 'T·ªá', 3: 'B√¨nh th∆∞·ªùng', 4: 'Vui', 5: 'R·∫•t vui'
    };

    const levelCounts = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };
    filtered.forEach(([_, level]) => {
        if (levelCounts[level] !== undefined) {
            levelCounts[level]++;
        }
    });

    const sortedByDate = filtered.map(([date, level]) => ({
        date: moment(date),
        level
    })).sort((a, b) => a.date - b.date);

    const half = Math.floor(sortedByDate.length / 2);
    const firstHalf = sortedByDate.slice(0, half);
    const secondHalf = sortedByDate.slice(half);

    const avgFirstHalf = firstHalf.reduce((sum, item) => sum + item.level, 0) / (firstHalf.length || 1);
    const avgSecondHalf = secondHalf.reduce((sum, item) => sum + item.level, 0) / (secondHalf.length || 1);

    // ‚úÖ Ph√¢n t√≠ch xu h∆∞·ªõng t·ªïng quan
    let trendDescription = "";
    const diff = avgSecondHalf - avgFirstHalf;
    if (diff > 0.3) {
        trendDescription = "C·∫£m x√∫c c√≥ xu h∆∞·ªõng tƒÉng d·∫ßn (ƒë·∫ßu k·ª≥ th·∫•p, cu·ªëi k·ª≥ cao).";
    } else if (diff < -0.3) {
        trendDescription = "C·∫£m x√∫c c√≥ xu h∆∞·ªõng gi·∫£m d·∫ßn (ƒë·∫ßu k·ª≥ cao, cu·ªëi k·ª≥ th·∫•p).";
    } else {
        trendDescription = "C·∫£m x√∫c ·ªïn ƒë·ªãnh, kh√¥ng c√≥ nhi·ªÅu bi·∫øn ƒë·ªông r√µ r·ªát.";
    }

    const entries = filtered.map(([date, level]) =>
        `Ng√†y ${moment(date).format('DD/MM')}: ${moodMap[level] || 'Kh√¥ng r√µ'} (m·ª©c ${level})`
    ).join('\n');

    const aiPrompt = `
D∆∞·ªõi ƒë√¢y l√† th·ªëng k√™ c·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng trong ${filterRange} ng√†y qua.
M·ª©c ƒë·ªô c·∫£m x√∫c: 
1: R·∫•t t·ªá
2: T·ªá
3: B√¨nh th∆∞·ªùng
4: Vui
5: R·∫•t vui

--- Th·ªëng k√™ ---
S·ªë ng√†y m·ª©c 1 (R·∫•t t·ªá): ${levelCounts[1]}
S·ªë ng√†y m·ª©c 2 (T·ªá): ${levelCounts[2]}
S·ªë ng√†y m·ª©c 3 (B√¨nh th∆∞·ªùng): ${levelCounts[3]}
S·ªë ng√†y m·ª©c 4 (Vui): ${levelCounts[4]}
S·ªë ng√†y m·ª©c 5 (R·∫•t vui): ${levelCounts[5]}

--- Di·ªÖn bi·∫øn ---
M·ª©c c·∫£m x√∫c trung b√¨nh n·ª≠a ƒë·∫ßu: ${avgFirstHalf.toFixed(2)}
M·ª©c c·∫£m x√∫c trung b√¨nh n·ª≠a cu·ªëi: ${avgSecondHalf.toFixed(2)}
Xu h∆∞·ªõng t·ªïng th·ªÉ: ${trendDescription}

--- Chi ti·∫øt t·ª´ng ng√†y ---
${entries}

==> D·ª±a tr√™n c√°c th√¥ng tin tr√™n, h√£y ph√¢n t√≠ch ng·∫Øn g·ªçn s·ª©c kh·ªèe tinh th·∫ßn trong giai ƒëo·∫°n n√†y.
- N·∫øu c·∫£m x√∫c ch·ªß y·∫øu t√≠ch c·ª±c (4‚Äì5) v√† c√≥ xu h∆∞·ªõng tƒÉng, h√£y nh·∫≠n ƒë·ªãnh l√† tinh th·∫ßn c·∫£i thi·ªán.
- N·∫øu c·∫£m x√∫c gi·∫£m ho·∫∑c c√≥ nhi·ªÅu m·ª©c th·∫•p, h√£y ƒë∆∞a ra nh·∫≠n x√©t ph√π h·ª£p.
- N·∫øu ·ªïn ƒë·ªãnh, k·∫øt lu·∫≠n l√† ·ªïn ƒë·ªãnh.
Ch·ªâ c·∫ßn tr·∫£ l·ªùi ng·∫Øn g·ªçn trong 1‚Äì2 c√¢u, kh√¥ng c·∫ßn li·ªát k√™ l·∫°i chi ti·∫øt.
`;

    try {
        const response = await fetch('http://localhost:9999/api/analyze-mood', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ prompt: aiPrompt })
        });
        const data = await response.json();
        setAiAnalysis(data.result);
    } catch (error) {
        setAiAnalysis('Kh√¥ng th·ªÉ k·∫øt n·ªëi AI l√∫c n√†y.');
    }
};


        fetchChartData();
    }, [filterRange]);

    useEffect(() => {
        const fetchPaged = async () => {
            try {
                const res = await getMyMoodsPaged(currentPage, pageSize);
                setPagedMoods(res.data.moods);
                setTotalPages(res.data.totalPages);
            } catch (err) {
                console.error('L·ªói khi l·∫•y mood ph√¢n trang:', err);
            }
        };

        fetchPaged();
    }, [currentPage]);

    return (
        <section className="section">
            <div className="container">
                <h3 className="text-center fw-bold mb-4">üìà Bi·ªÉu ƒë·ªì c·∫£m x√∫c theo th·ªùi gian</h3>

                <div className="mb-4 text-end">
                    <select
                        className="form-select w-auto d-inline-block"
                        value={filterRange}
                        onChange={(e) => setFilterRange(e.target.value)}
                    >
                        <option value="7">7 ng√†y qua</option>
                        <option value="30">1 th√°ng qua</option>
                    </select>
                </div>

                <ResponsiveContainer width="100%" height={400}>
                    <LineChart data={chartData} margin={{ top: 20, right: 30, left: 0, bottom: 80 }}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="date" angle={-30} textAnchor="end" interval={0} />
                        <YAxis domain={[1, 5]} ticks={[1, 2, 3, 4, 5]} allowDecimals={false}
                            tickFormatter={(tick) => ['R·∫•t t·ªá', 'T·ªá', 'B√¨nh th∆∞·ªùng', 'Vui', 'R·∫•t vui'][tick - 1]} />
                        <Tooltip formatter={(value) => [`C·∫£m x√∫c: ${['R·∫•t t·ªá', 'T·ªá', 'B√¨nh th∆∞·ªùng', 'Vui', 'R·∫•t vui'][value - 1]}`, 'Ng√†y']} labelFormatter={(label) => `Ng√†y: ${label}`} />
                        <Line type="monotone" dataKey="count" stroke="#4e73df" strokeWidth={3} activeDot={{ r: 6 }} />
                    </LineChart>
                </ResponsiveContainer>

                {aiAnalysis && (
                    <div className="mx-auto mt-4 p-4 border border-warning bg-warning-subtle text-dark rounded shadow-sm" style={{ maxWidth: 700 }}>
                        <h5 className="fw-bold mb-2 text-center">üß† Ph√¢n t√≠ch bi·ªÉu ƒë·ªì</h5>
                        <p className="mb-0 text-center">{aiAnalysis}</p>
                    </div>
                )}

                

                <h3 className="mt-5 fw-bold">üìñ L·ªãch s·ª≠ c·∫£m x√∫c</h3>
                <MentalAlertBox />
                <div className="table-responsive mt-3 p-3 border rounded bg-light shadow-sm">
                    <table className="table table-bordered table-hover align-middle text-center shadow-sm">
                        <thead className="table-light">
                            <tr>
                                <th>Ng√†y</th>
                                <th>C·∫£m x√∫c</th>
                                <th>Ghi ch√∫</th>
                                <th>G·ª£i √Ω t·ª´ AI</th>
                            </tr>
                        </thead>
                        <tbody>
                            {pagedMoods.map((mood, idx) => (
                                <tr key={idx}>
                                    <td>{moment(mood.date).format('DD/MM/YYYY')}</td>
                                    <td>{mood.moodLevel?.name || 'Kh√¥ng r√µ'}</td>
                                    <td>{mood.note || '...'}</td>
                                    <td>{mood.aiSuggestion || '...'}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>

                <div className="d-flex justify-content-center align-items-center mt-3 gap-3">
                    <button
                        className="btn btn-outline-primary"
                        onClick={() => setCurrentPage(p => Math.max(p - 1, 0))}
                        disabled={currentPage === 0}
                    >
                        ‚¨ÖÔ∏è Tr∆∞·ªõc
                    </button>
                    <span>Trang {currentPage + 1} / {totalPages}</span>
                    <button
                        className="btn btn-outline-primary"
                        onClick={() => setCurrentPage(p => Math.min(p + 1, totalPages - 1))}
                        disabled={currentPage >= totalPages - 1}
                    >
                        Ti·∫øp ‚û°Ô∏è
                    </button>
                </div>
            </div>
        </section>
    );
};

export default MoodHistoryPage;
