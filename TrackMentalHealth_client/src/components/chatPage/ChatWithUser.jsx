import { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import {
    MainContainer,
    MessageContainer,
    MessageHeader,
    MessageInput,
    MessageList,
    MinChatUiProvider
} from "@minchat/react-chat-ui";

import {connectWebSocket, sendWebSocketMessage} from "../../services/stompClient";
import { getCurrentUserId } from "../../utils/getCurrentUserID";

function ChatWithUser() {
    const currentUserId = getCurrentUserId();
    const { sessionId } = useParams(); // ID c·ªßa phi√™n tr√≤ chuy·ªán t·ª´ URL
    const [messages, setMessages] = useState([]);
    const [receiverName, setReceiverName] = useState("ƒêang t·∫£i..."); // T√™n ng∆∞·ªùi kia

    const nav = useNavigate();

    useEffect(() => {
        const fetchMessages = async () => {
            try {
                const res = await getMessagesBySessionId(sessionId);
                console.log(res)

                const formatted = res
                    .filter(msg => msg?.id && msg?.message)
                    .map(msg => ({
                        text: msg.message,
                        user: {
                            id: msg.senderId.toString(),
                            name: msg.session.receiver.fullname,
                        }
                    }));

                const otherUser = res.find(
                    msg => msg.senderId.toString() !== currentUserId
                )?.session.receiver.fullname;
                setReceiverName(otherUser);
                setMessages(formatted);
            } catch (err) {
                console.error("L·ªói khi t·∫£i tin nh·∫Øn:", err);
            }
        };

        fetchMessages();

        const disconnect = connectWebSocket(sessionId, (msg) => {
            if (!msg || !msg.message || !msg.senderId) return;

            setMessages(prev => [...prev, {
                text: msg.message,
                user: {
                    id: msg.senderId.toString(),
                    name: msg.senderName || "ƒê·ªëi ph∆∞∆°ng"
                }
            }]);

            if (msg.senderId.toString() !== currentUserId) {
                setReceiverName(msg.senderName || "Ng∆∞·ªùi d√πng");
            }
        });

        return () => {
            if (disconnect) disconnect();
        };
    }, [sessionId]);

    const handleSendMessage = async (text) => {
        if (!text.trim()) return;

        // G·ª≠i qua WebSocket (n·∫øu c·∫ßn)
        sendWebSocketMessage(`/app/chat/${sessionId}`, {
            senderId: currentUserId,
            message: text,
            session: { id: sessionId }
        });

        const newMessage = new ChatMessageDTO({
            senderId: currentUserId,
            message: text,
            isRead: false
        });

        try {
            console.log("üöÄ G·ª≠i tin nh·∫Øn t·ªõi API:", newMessage);

            const res = await sendMessage(sessionId, newMessage);
            console.log("‚úÖ Ph·∫£n h·ªìi t·ª´ server:", res);

            const data = res.data || res; // tu·ª≥ thu·ªôc v√†o structure c·ªßa API

            const formatted = {
                text: data.message,
                user: {
                    id: data.senderId?.toString(),
                    name: data.session?.users?.fullname || "T√¥i",
                }
            };
            setMessages(prev => [...prev, formatted]);
        } catch (err) {
            console.error("‚ùå Kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn:");

            if (err.response) {
                // üëâ N·∫øu l·ªói t·ª´ server (status >= 400)
                console.error("üî¥ Status:", err.response.status);         // v√≠ d·ª• 403
                console.error("üî¥ Headers:", err.response.headers);
                console.error("üî¥ Response data:", err.response.data);    // chi ti·∫øt l·ªói

                alert(
                    `L·ªói g·ª≠i tin nh·∫Øn:\n` +
                    `Status: ${err.response.status}\n` +
                    `Details: ${JSON.stringify(err.response.data, null, 2)}`
                );
            } else if (err.request) {
                // üëâ N·∫øu request ƒë∆∞·ª£c g·ª≠i nh∆∞ng kh√¥ng c√≥ response (network error)
                console.error("üõë Request l·ªói, kh√¥ng nh·∫≠n ƒë∆∞·ª£c response:", err.request);
                alert("L·ªói m·∫°ng ho·∫∑c server kh√¥ng ph·∫£n h·ªìi.");
            } else {
                // üëâ L·ªói kh√°c (v√≠ d·ª• l·ªói config Axios)
                console.error("‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh:", err.message);
                alert(`L·ªói kh√¥ng x√°c ƒë·ªãnh: ${err.message}`);
            }
        }
    };

    const handleSendMeetLink = () => {
        const meetLink = "H√£y tham gia c√πng t√¥i: https://meet.google.com/ddo-ygdu-dcy";
        handleSendMessage(meetLink);
    };

    return (
        <MinChatUiProvider theme="#6ea9d7">
            <MainContainer style={{ height: '100vh' }}>
                <MessageContainer>
                    <MessageHeader onBack={() => nav('/')}>
                        {receiverName}
                    </MessageHeader>

                    <MessageList
                        currentUserId={currentUserId}
                        messages={messages}
                    />

                    <div>
                        <div style={{ flex: 1 }}>
                            <MessageInput
                                placeholder="Nh·∫≠p tin nh·∫Øn..."
                                onSendMessage={handleSendMessage}
                                showSendButton
                                showAttachButton={true}
                                onAttachClick={handleSendMeetLink}
                            />
                        </div>
                    </div>
                </MessageContainer>
            </MainContainer>
        </MinChatUiProvider>
    );
}

export default ChatWithUser;
