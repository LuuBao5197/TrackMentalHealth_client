import React, { useState, useEffect } from 'react';
import { useFormik } from 'formik';
import axios from 'axios';
import { useParams } from 'react-router-dom';
import { jwtDecode } from 'jwt-decode';

const EditArticle = () => {
  const { articleId } = useParams(); // L·∫•y articleId t·ª´ URL
  const [createdAt, setCreatedAt] = useState(null); // L∆∞u th·ªùi gian t·∫°o b√†i vi·∫øt ban ƒë·∫ßu
  // const [currentAuthorId, setCurrentAuthorId] = useState(null); // Kh√¥ng c·∫ßn state n√†y n·∫øu kh√¥ng hi·ªÉn th·ªã

  const token = localStorage.getItem('token');
  let userId = null; // ƒê√¢y l√† ID c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p

  if (token) {
    try {
      const decoded = jwtDecode(token);
      userId = decoded.userId; // ho·∫∑c t√™n field ph√π h·ª£p trong token c·ªßa b·∫°n
    } catch (error) {
      console.error('‚ùå Token kh√¥ng h·ª£p l·ªá:', error);
    }
  }

  const formik = useFormik({
    initialValues: {
      title: '',
      content: '',
      status: false,
    },
    onSubmit: async (values) => {
      const now = new Date().toISOString();
      const articleData = {
        ...values,
        id: articleId, // Th√™m ID c·ªßa b√†i vi·∫øt ƒë·ªÉ backend bi·∫øt b√†i n√†o c·∫ßn c·∫≠p nh·∫≠t
        status: values.status.toString(), // Chuy·ªÉn ƒë·ªïi boolean th√†nh string n·∫øu API c·∫ßn
        // KH√îNG G·ª¨I TR∆Ø·ªúNG 'author' ƒêI N·ªÆA
        // createdAt: createdAt || now, // V·∫´n n√™n ƒë·ªÉ backend qu·∫£n l√Ω ho√†n to√†n createdAt v√† updatedAt
        updatedAt: now, // C·∫≠p nh·∫≠t th·ªùi gian ch·ªânh s·ª≠a (backend c≈©ng n√™n t·ª± ƒë·ªông)
      };

      try {
        console.log('üì¶ D·ªØ li·ªáu g·ª≠i ƒëi ƒë·ªÉ c·∫≠p nh·∫≠t (kh√¥ng c√≥ author):', articleData);
        await axios.put(`http://localhost:9999/api/article/${articleId}`, articleData); 
        alert('‚úÖ C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng!');
        // T√πy ch·ªçn: chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng sau khi c·∫≠p nh·∫≠t
        // navigate('/articles'); 
      } catch (error) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt:', error.response?.data || error.message);
        alert('‚ùå C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t b√†i vi·∫øt.');
      }
    },
  });

  // Fetch article data khi component mount ho·∫∑c articleId thay ƒë·ªïi
  useEffect(() => {
    const fetchArticle = async () => {
      if (!articleId) return;

      try {
        const res = await axios.get(`http://localhost:9999/api/article/${articleId}`);
        const fetchedArticle = res.data;

        formik.setValues({
          title: fetchedArticle.title || '',
          content: fetchedArticle.content || '',
          status: fetchedArticle.status === 'true' || fetchedArticle.status === true,
        });
        setCreatedAt(fetchedArticle.createdAt); // V·∫´n l∆∞u ƒë·ªÉ tham kh·∫£o n·∫øu c·∫ßn
        // setCurrentAuthorId(fetchedArticle.author); // Kh√¥ng c·∫ßn set state n√†y n·∫øu kh√¥ng hi·ªÉn th·ªã
      } catch (err) {
        console.error('‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√†i vi·∫øt:', err);
        alert('‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√†i vi·∫øt.');
      }
    };

    fetchArticle();
  }, [articleId]);

  return (
    <div className="container my-5" style={{ maxWidth: '700px' }}>
      <div className="card shadow">
        <div className="card-body p-4">
          <h2 className="mb-4 text-primary">‚úèÔ∏è Ch·ªânh s·ª≠a B√†i Vi·∫øt</h2>

          <form onSubmit={formik.handleSubmit}>
            <div className="mb-3">
              <label className="form-label">Ti√™u ƒë·ªÅ b√†i vi·∫øt</label>
              <input
                type="text"
                className="form-control"
                name="title"
                onChange={formik.handleChange}
                value={formik.values.title}
                required
              />
            </div>

            <div className="mb-3">
              <label className="form-label">N·ªôi dung b√†i vi·∫øt</label>
              <textarea
                className="form-control"
                name="content"
                rows="6"
                onChange={formik.handleChange}
                value={formik.values.content}
                required
              />
            </div>

            <div className="form-check mb-4">
              <input
                className="form-check-input"
                type="checkbox"
                name="status"
                onChange={formik.handleChange}
                checked={formik.values.status}
                id="statusCheck"
              />
              <label className="form-check-label" htmlFor="statusCheck">
                K√≠ch ho·∫°t b√†i vi·∫øt
              </label>
            </div>

            {/* ƒê√É B·ªé ƒêO·∫†N CODE HI·ªÇN TH·ªä T√ÅC GI·∫¢ KH√îNG CH·ªàNH S·ª¨A ƒê∆Ø·ª¢C ·ªû ƒê√ÇY */}

            <button type="submit" className="btn btn-primary w-100">
              üíæ L∆∞u thay ƒë·ªïi
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default EditArticle;