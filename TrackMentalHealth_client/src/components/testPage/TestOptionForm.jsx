import React, { lazy, useEffect, useState } from 'react';
import { useFormik, FormikProvider, FieldArray } from 'formik';
import * as Yup from 'yup';
import axios from 'axios';
import { useNavigate, useParams } from 'react-router-dom';
import Loadable from '../../layouts/full/shared/loadable/Loadable';
import { showAlert } from '../../utils/showAlert';
import { showConfirm } from '../../utils/showConfirm';
// const OptionPage = Loadable(lazy(() => import('../testPage/ImportTestExcel')))

const FullTestFormWithPreview = () => {
  const { id } = useParams();
  const isEditMode = !!id;
  const [previewMode, setPreviewMode] = useState(false);
  const navigate = useNavigate();
  const formik = useFormik({
    enableReinitialize: true,
    initialValues: {
      title: '',
      description: '',
      instructions: '',
      questions: []
    },
    validationSchema: Yup.object({
      title: Yup.string().required('Ti√™u ƒë·ªÅ b·∫Øt bu·ªôc'),
      description: Yup.string().required('M√¥ t·∫£ b·∫Øt bu·ªôc'),
      instructions: Yup.string().required('H∆∞·ªõng d·∫´n b·∫Øt bu·ªôc'),
      questions: Yup.array().of(
        Yup.object().shape({
          questionText: Yup.string().required('C√¢u h·ªèi l√† b·∫Øt bu·ªôc'),
          questionType: Yup.string().required('Lo·∫°i l√† b·∫Øt bu·ªôc'),
          questionOrder: Yup.number(),
          options: Yup.array()
            .of(
              Yup.object().shape({
                optionText: Yup.string().trim('Kh√¥ng ch·ªâ ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng').required('ƒê√°p √°n l√† b·∫Øt bu·ªôc'),
                scoreValue: Yup.number()
                  .required('ƒêi·ªÉm l√† b·∫Øt bu·ªôc')
                  .typeError('ƒêi·ªÉm ph·∫£i l√† s·ªë'),
                optionOrder: Yup.number()
              })
            )
            .min(2, 'C·∫ßn √≠t nh·∫•t 2 ƒë√°p √°n')
            // .max(4, 'T·ªëi ƒëa 4 ƒë√°p √°n')
            .test(
              'unique-and-valid-scores',
              'ƒêi·ªÉm ph·∫£i kh√°c nhau v√† n·∫±m trong kho·∫£ng t·ª´ 1 ƒë·∫øn N (s·ªë l∆∞·ª£ng ƒë√°p √°n)',
              function (options) {
                if (!Array.isArray(options)) return false;
                const scores = options.map(o => o.scoreValue);

                // 1. Check all are numbers in range 1..N
                const isValidRange = scores.every(score => typeof score === 'number' && score >= 0 && score <= options.length);

                // 2. Check no duplicates
                const isUnique = new Set(scores).size === scores.length;

                return isValidRange && isUnique;
              }
            )
            .test(
              'unique-optionText',
              'C√°c ƒë√°p √°n kh√¥ng ƒë∆∞·ª£c tr√πng n·ªôi dung',
              (options) => {
                const texts = options.map((o) => o.optionText?.trim().toLowerCase());
                if (texts.some(text => !text)) return false;
                return new Set(texts).size === texts.length;
              }
            )
        })
      )
        .min(1, 'C·∫ßn √≠t nh·∫•t 1 c√¢u h·ªèi')
        .test(
          'unique-questionText',
          'C√°c c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c tr√πng n·ªôi dung',
          (questions) => {
            const texts = questions.map(q => q.questionText?.trim().toLowerCase());
            return new Set(texts).size === texts.length;
          }
        )
    }),
    // (To√†n b·ªô n·ªôi dung b·∫°n g·ª≠i ·ªü tr√™n v·∫´n gi·ªØ nguy√™n, ch·ªâ highlight ph·∫ßn s·ª≠a)

    onSubmit: async (values, { setTouched }) => {
      const errors = await formik.validateForm();

      if (Object.keys(errors).length > 0) {
        const touchedQuestions = values.questions.map((q) => ({
          questionText: true,
          questionType: true,
          options: q.options.map(() => ({
            optionText: true,
            scoreValue: true
          }))
        }));

        setTouched({
          title: true,
          description: true,
          instructions: true,
          questions: touchedQuestions
        });
        showAlert("Check information carefully before save",);
        // alert('Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin tr∆∞·ªõc khi l∆∞u!');
        return;
      }
      const payload = {
        ...values,
        id: isEditMode ? id : undefined, // üëà n·∫øu ƒëang s·ª≠a, th√™m id v√†o payload
        questions: values.questions.map((q, qIdx) => ({
          id: q.id, // üëà gi·ªØ l·∫°i id c√¢u h·ªèi n·∫øu c√≥
          questionText: q.questionText,
          questionType: q.questionType,
          questionOrder: qIdx + 1,
          options: q.options.map((opt, oIdx) => ({
            id: opt.id, // üëà gi·ªØ l·∫°i id ƒë√°p √°n n·∫øu c√≥
            optionText: opt.optionText,
            scoreValue: opt.scoreValue,
            optionOrder: oIdx + 1
          }))
        }))
      };

      try {
        if (isEditMode) {
          const confirm = await showConfirm("Are you sure to save");
          if (!confirm) {
            return;
          }
          // await axios.put(`http://localhost:9999/api/test/full/${id}`, payload);
          console.log(payload);
          await axios.put(`http://localhost:9999/api/test/full/${id}`, payload);
          showAlert('C·∫≠p nh·∫≠t th√†nh c√¥ng!', "success");
          navigate(-1);

        } else {
          await axios.post('http://localhost:9999/api/test/full', payload);
          showAlert('T·∫°o th√†nh c√¥ng!');
          navigate(-1);
        }
        formik.resetForm();
      } catch (err) {
        console.error(err);
        showAlert('C√≥ l·ªói x·∫£y ra khi l∆∞u d·ªØ li·ªáu!');
      }
    }



  });

  useEffect(() => {
    if (isEditMode) {
      axios.get(`http://localhost:9999/api/test/${id}`)
        .then(res => formik.setValues(res.data))
        .catch(err => console.error('Load l·ªói:', err));
    }
  }, [id]);

  return (
    <div className="container mt-4">
      {/* <OptionPage /> */}
      <h3>{isEditMode ? 'C·∫≠p nh·∫≠t' : 'T·∫°o'} b√†i thi</h3>

      <button className="btn btn-warning mb-3" onClick={() => setPreviewMode(!previewMode)}>
        {previewMode ? 'T·∫Øt Preview' : 'Xem Preview'}
      </button>

      {previewMode ? (
        <div>
          <h4>{formik.values.title}</h4>
          <p><strong>M√¥ t·∫£:</strong> {formik.values.description}</p>
          <p><strong>H∆∞·ªõng d·∫´n:</strong> {formik.values.instructions}</p>
          <hr />
          {formik.values.questions.map((q, qIdx) => (
            <div key={qIdx} className="mb-4">
              <h5>C√¢u {qIdx + 1}: {q.questionText}</h5>
              {q.options.map((opt, oIdx) => (
                <div key={oIdx} className="form-check">
                  <input className="form-check-input" type="radio" name={`question_${qIdx}`} disabled />
                  <label className="form-check-label">
                    {opt.optionText} <small className="text-muted">(ƒêi·ªÉm: {opt.scoreValue})</small>
                  </label>
                </div>
              ))}
            </div>
          ))}
        </div>
      ) : (
        <form onSubmit={formik.handleSubmit}>
          <div className="mb-3">
            <label className="form-label">Ti√™u ƒë·ªÅ</label>
            <input type="text" className="form-control" name="title" value={formik.values.title} onChange={formik.handleChange} />
            {formik.touched.title && formik.errors.title && <div className="text-danger">{formik.errors.title}</div>}
          </div>
          <div className="mb-3">
            <label className="form-label">M√¥ t·∫£</label>
            <textarea className="form-control" name="description" value={formik.values.description} onChange={formik.handleChange}></textarea>
            {formik.touched.description && formik.errors.description && <div className="text-danger">{formik.errors.description}</div>}
          </div>
          <div className="mb-3">
            <label className="form-label">H∆∞·ªõng d·∫´n</label>
            <textarea className="form-control" name="instructions" value={formik.values.instructions} onChange={formik.handleChange}></textarea>
            {formik.touched.instructions && formik.errors.instructions && <div className="text-danger">{formik.errors.instructions}</div>}
          </div>

          <FormikProvider value={formik}>
            <FieldArray name="questions" render={({ push, remove }) => (
              <div>
                {typeof formik.errors.questions === 'string' && formik.touched.questions && (
                  <div className="text-danger mb-2">{formik.errors.questions}</div>
                )}

                {formik.values.questions.map((q, qIdx) => (
                  <div key={qIdx} className="card p-3 mb-3">
                    <h5>C√¢u h·ªèi {qIdx + 1}</h5>
                    <input
                      type="text"
                      placeholder="N·ªôi dung c√¢u h·ªèi"
                      className="form-control mb-2"
                      name={`questions[${qIdx}].questionText`}
                      value={q.questionText}
                      onChange={formik.handleChange}
                    />
                    {formik.touched.questions?.[qIdx]?.questionText && formik.errors.questions?.[qIdx]?.questionText && (
                      <div className="text-danger">{formik.errors.questions[qIdx].questionText}</div>
                    )}
                    <input
                      type="text"
                      placeholder="Lo·∫°i c√¢u h·ªèi"
                      className="form-control mb-2"
                      name={`questions[${qIdx}].questionType`}
                      value={q.questionType}
                      onChange={formik.handleChange}
                    />
                    {formik.touched.questions?.[qIdx]?.questionType && formik.errors.questions?.[qIdx]?.questionType && (
                      <div className="text-danger">{formik.errors.questions[qIdx].questionType}</div>
                    )}

                    <FieldArray name={`questions[${qIdx}].options`} render={({ push, remove }) => (
                      <div>
                        <h6>ƒê√°p √°n</h6>
                        {/* ‚úÖ N·∫øu to√†n b·ªô options b·ªã thi·∫øu th√¨ hi·ªÉn th·ªã l·ªói */}
                        {typeof formik.errors.questions?.[qIdx]?.options === 'string' && formik.touched.questions?.[qIdx]?.options && (
                          <div className="text-danger mb-2">{formik.errors.questions[qIdx].options}</div>
                        )}
                        {q.options.map((opt, oIdx) => {
                          const currentScores = q.options.map(o => o.scoreValue);
                          const isDuplicate = currentScores.filter(score => score === opt.scoreValue).length > 1;
                          const isOutOfRange = opt.scoreValue < 0 || opt.scoreValue > q.options.length;
                          return (
                            <div key={oIdx} className="row mb-2">
                              <div className="col-md-5">
                                <input
                                  type="text"
                                  placeholder="N·ªôi dung ƒë√°p √°n"
                                  className="form-control"
                                  name={`questions[${qIdx}].options[${oIdx}].optionText`}
                                  value={opt.optionText}
                                  onChange={formik.handleChange}
                                  onBlur={formik.handleBlur} // üëà ƒë·∫£m b·∫£o Formik bi·∫øt field n√†y ƒë∆∞·ª£c "touch"
                                />
                                {formik.touched.questions?.[qIdx]?.options?.[oIdx]?.optionText &&
                                  formik.errors.questions?.[qIdx]?.options?.[oIdx]?.optionText && (
                                    <div className="text-danger mt-1">
                                      {formik.errors.questions[qIdx].options[oIdx].optionText}
                                    </div>
                                  )}
                              </div>

                              <div className="col-md-3">
                                <input
                                  type="number"
                                  placeholder="ƒêi·ªÉm > 0 "
                                  className={`form-control ${(isDuplicate || isOutOfRange) ? 'is-invalid' : ''}`}
                                  name={`questions[${qIdx}].options[${oIdx}].scoreValue`}
                                  value={opt.scoreValue}
                                  onChange={(e) => {
                                    const value = parseInt(e.target.value, 10);
                                    formik.setFieldValue(`questions[${qIdx}].options[${oIdx}].scoreValue`, value);
                                  }}
                                />
                                {(isDuplicate || isOutOfRange) && (
                                  <div className="invalid-feedback">
                                    {isOutOfRange
                                      ? 'ƒêi·ªÉm ph·∫£i > 0 v√† kh√¥ng l·ªõn h∆°n s·ªë l∆∞·ª£ng ƒë√°p √°n'
                                      : 'ƒêi·ªÉm n√†y ƒë√£ b·ªã tr√πng trong ƒë√°p √°n'}
                                  </div>
                                )}
                              </div>
                              <div className="col-md-2">
                                <button className="btn btn-danger" type="button" onClick={() => remove(oIdx)} disabled={q.options.length <= 1}>Xo√°</button>
                              </div>
                            </div>
                          );
                        })}
                        <button
                          className="btn btn-secondary"
                          type="button"
                          onClick={() => {
                            const usedScores = q.options.map(o => o.scoreValue);
                            const nextScore = usedScores.length + 1;
                            push({ optionText: '', scoreValue: nextScore, optionOrder: q.options.length + 1 });
                          }}
                        >
                          + Th√™m ƒë√°p √°n
                        </button>
                      </div>
                    )} />
                    <hr />
                    <button className="btn btn-danger" type="button" onClick={() => remove(qIdx)}>Xo√° c√¢u h·ªèi</button>
                  </div>
                ))}

                <button className="btn btn-primary mt-3" type="button" onClick={() => push({ questionText: '', questionType: '', questionOrder: formik.values.questions.length + 1, options: [] })}>
                  + Th√™m c√¢u h·ªèi
                </button>
              </div>
            )} />
          </FormikProvider>

          <div className="mt-4">
            <button type="submit" className="btn btn-success">L∆∞u b√†i thi</button>
          </div>
        </form>
      )}
    </div>
  );
};

export default FullTestFormWithPreview;
