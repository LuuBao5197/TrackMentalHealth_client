import React, { useState } from 'react';
import { useFormik } from 'formik';
import axios from 'axios';
import { jwtDecode } from 'jwt-decode';

const CreateLesson = () => {
  const [uploading, setUploading] = useState(false);

  // Gi·∫£i m√£ token ƒë·ªÉ l·∫•y userId
  const token = localStorage.getItem('token');
  let userId = null;

  if (token) {
    try {
      const decoded = jwtDecode(token);
      // Gi·∫£ ƒë·ªãnh token c√≥ ch·ª©a contentCreatorId ho·∫∑c m·ªôt ID ph√π h·ª£p
      userId = decoded.contentCreatorId;
    } catch (error) {
      console.error('‚ùå Token kh√¥ng h·ª£p l·ªá:', error);
      // X·ª≠ l√Ω l·ªói token, v√≠ d·ª•: chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
    }
  }

  // State cho c√°c b∆∞·ªõc c·ªßa b√†i h·ªçc
  const [steps, setSteps] = useState([
    // Kh·ªüi t·∫°o m·ªôt b∆∞·ªõc ƒë·∫ßu ti√™n v·ªõi mediaType v√† mediaUrl r·ªóng
    { title: '', content: '', mediaType: '', mediaUrl: '' },
  ]);

  // Formik ƒë·ªÉ qu·∫£n l√Ω form ch√≠nh c·ªßa b√†i h·ªçc
  const formik = useFormik({
    initialValues: {
      title: '',
      description: '',
      status: false,
      photo: '', // ·∫¢nh ƒë·∫°i di·ªán c·ªßa b√†i h·ªçc
    },
    onSubmit: async (values) => {
      // L·∫•y th·ªùi gian hi·ªán t·∫°i theo ƒë·ªãnh d·∫°ng ISO 8601
      // L∆∞u √Ω: T·ªët nh·∫•t l√† ƒë·ªÉ backend t·ª± ƒë·ªông qu·∫£n l√Ω createdAt v√† updatedAt
      const now = new Date().toISOString(); 

      const lessonData = {
        title: values.title,
        description: values.description,
        photo: values.photo, // URL ·∫£nh ƒë·∫°i di·ªán ƒë√£ upload
        status: values.status.toString(), // Chuy·ªÉn boolean sang string "true"/"false"
        createdBy: userId, // ID c·ªßa ng∆∞·ªùi t·∫°o t·ª´ token
        createdAt: now, // Th·ªùi gian t·∫°o (t·ª´ frontend)
        updatedAt: now, // Th·ªùi gian c·∫≠p nh·∫≠t (t·ª´ frontend, c√≥ th·ªÉ ƒë·ªÉ backend x·ª≠ l√Ω)

        // Map c√°c b∆∞·ªõc t·ª´ state ƒë·ªÉ g·ª≠i l√™n server
        lessonSteps: steps.map((step, index) => ({
          stepNumber: index + 1, // ƒê·∫£m b·∫£o s·ªë th·ª© t·ª± b∆∞·ªõc
          title: step.title,
          content: step.content,
          mediaType: step.mediaType, // Lo·∫°i media ƒë√£ t·ª± ƒë·ªông nh·∫≠n di·ªán
          mediaUrl: step.mediaUrl, // URL media ƒë√£ upload
        })),
      };

      try {
        console.log("üì¶ D·ªØ li·ªáu g·ª≠i l√™n:", lessonData);
        const response = await axios.post('http://localhost:9999/api/lesson/save', lessonData);
        console.log('‚úÖ T·∫°o b√†i h·ªçc th√†nh c√¥ng:', response.data);
        alert('‚úÖ T·∫°o b√†i h·ªçc th√†nh c√¥ng!');
        formik.resetForm(); // Reset form ch√≠nh
        setSteps([{ title: '', content: '', mediaType: '', mediaUrl: '' }]); // Reset c√°c b∆∞·ªõc
      } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o b√†i h·ªçc:', error.response?.data || error.message);
        alert('‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o b√†i h·ªçc.');
      }
    },
  });

  // H√†m ƒë·ªÉ c·∫≠p nh·∫≠t m·ªôt tr∆∞·ªùng c·ªßa m·ªôt b∆∞·ªõc c·ª• th·ªÉ
  const handleStepChange = (index, field, value) => {
    const updatedSteps = [...steps];
    updatedSteps[index][field] = value;
    setSteps(updatedSteps);
  };

  // H√†m ƒë·ªÉ th√™m m·ªôt b∆∞·ªõc h·ªçc m·ªõi
  const addStep = () => {
    setSteps([...steps, { title: '', content: '', mediaType: '', mediaUrl: '' }]);
  };

  /**
   * H√†m x·ª≠ l√Ω upload file media l√™n server.
   *
   * @param {File} file - T·ªáp tin c·∫ßn upload.
   * @param {number} [stepIndex=-1] - Ch·ªâ s·ªë c·ªßa b∆∞·ªõc n·∫øu ƒëang upload media cho m·ªôt b∆∞·ªõc (-1 cho ·∫£nh ƒë·∫°i di·ªán b√†i h·ªçc).
   * @param {function} [onSuccessCallback=null] - Callback ƒë·ªÉ g·ªçi sau khi upload th√†nh c√¥ng cho ·∫£nh ƒë·∫°i di·ªán b√†i h·ªçc.
   */
  const handleUpload = async (file, stepIndex = -1, onSuccessCallback = null) => {
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    setUploading(true); // B·∫Øt ƒë·∫ßu tr·∫°ng th√°i upload
    try {
      const res = await axios.post('http://localhost:9999/api/upload', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      const url = res.data.url; // L·∫•y URL t·ª´ ph·∫£n h·ªìi c·ªßa server

      // T·ª± ƒë·ªông nh·∫≠n di·ªán lo·∫°i media d·ª±a tr√™n MIME type c·ªßa file
      let detectedMediaType = '';
      if (file.type.startsWith('image/')) {
        detectedMediaType = 'photo';
      } else if (file.type.startsWith('video/')) {
        detectedMediaType = 'video';
      } else if (file.type.startsWith('audio/')) {
        detectedMediaType = 'audio';
      } else {
        // Th√¥ng b√°o n·∫øu lo·∫°i t·ªáp kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
        alert('Lo·∫°i t·ªáp kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng ch·ªçn h√¨nh ·∫£nh, video ho·∫∑c √¢m thanh.');
        setUploading(false);
        return;
      }

      if (stepIndex !== -1) {
        // N·∫øu ƒëang upload cho m·ªôt b∆∞·ªõc h·ªçc c·ª• th·ªÉ
        const updatedSteps = [...steps];
        updatedSteps[stepIndex].mediaUrl = url;
        updatedSteps[stepIndex].mediaType = detectedMediaType; // C·∫≠p nh·∫≠t mediaType t·ª± ƒë·ªông
        setSteps(updatedSteps);
      } else if (onSuccessCallback) {
        // N·∫øu ƒëang upload ·∫£nh ƒë·∫°i di·ªán b√†i h·ªçc
        onSuccessCallback(url);
      }

    } catch (err) {
      console.error('‚ùå Upload th·∫•t b·∫°i:', err.response?.data || err.message);
      alert('‚ùå Upload th·∫•t b·∫°i!');
    } finally {
      setUploading(false); // K·∫øt th√∫c tr·∫°ng th√°i upload
    }
  };


  return (
    <div className="container my-5" style={{ maxWidth: '850px' }}>
      <div className="card shadow">
        <div className="card-body p-4">
          <h2 className="mb-4 text-primary">üìù T·∫°o B√†i H·ªçc M·ªõi</h2>

          <form onSubmit={formik.handleSubmit}>
            {/* Ti√™u ƒë·ªÅ b√†i h·ªçc */}
            <div className="mb-3">
              <label htmlFor="title" className="form-label">Ti√™u ƒë·ªÅ b√†i h·ªçc</label>
              <input
                type="text"
                className="form-control"
                id="title"
                name="title"
                onChange={formik.handleChange}
                value={formik.values.title}
                required
              />
            </div>

            {/* M√¥ t·∫£ b√†i h·ªçc */}
            <div className="mb-3">
              <label htmlFor="description" className="form-label">M√¥ t·∫£</label>
              <textarea
                className="form-control"
                id="description"
                name="description"
                rows="4"
                onChange={formik.handleChange}
                value={formik.values.description}
              />
            </div>

            {/* ·∫¢nh ƒë·∫°i di·ªán b√†i h·ªçc */}
            <div className="mb-3">
              <label htmlFor="lessonPhoto" className="form-label">·∫¢nh ƒë·∫°i di·ªán b√†i h·ªçc</label>
              <input
                type="file"
                className="form-control"
                id="lessonPhoto"
                accept="image/*" // Ch·ªâ ch·∫•p nh·∫≠n ·∫£nh
                onChange={(e) => {
                  const file = e.target.files[0];
                  if (file) {
                    // G·ªçi handleUpload cho ·∫£nh ƒë·∫°i di·ªán b√†i h·ªçc (stepIndex = -1)
                    handleUpload(file, -1, (url) => formik.setFieldValue('photo', url));
                  }
                }}
              />
              {formik.values.photo && (
                <div className="mt-2 text-center">
                  <img
                    src={formik.values.photo}
                    alt="·∫¢nh ƒë·∫°i di·ªán"
                    style={{ maxHeight: '150px', borderRadius: '8px', objectFit: 'cover' }}
                  />
                </div>
              )}
            </div>

            {/* Tr·∫°ng th√°i b√†i h·ªçc */}
            <div className="form-check mb-4">
              <input
                className="form-check-input"
                type="checkbox"
                id="statusCheck"
                name="status"
                onChange={formik.handleChange}
                checked={formik.values.status}
              />
              <label className="form-check-label" htmlFor="statusCheck">
                K√≠ch ho·∫°t b√†i h·ªçc
              </label>
            </div>

            <hr />
            <h4 className="text-secondary mb-3">üìö C√°c B∆∞·ªõc H·ªçc</h4>

            {/* Render danh s√°ch c√°c b∆∞·ªõc h·ªçc */}
            {steps.map((step, index) => (
              <div key={index} className="border rounded p-3 mb-4 bg-light">
                <h5 className="mb-3">B∆∞·ªõc {index + 1}</h5>

                {/* Ti√™u ƒë·ªÅ b∆∞·ªõc */}
                <div className="mb-2">
                  <label htmlFor={`stepTitle-${index}`} className="form-label">Ti√™u ƒë·ªÅ b∆∞·ªõc</label>
                  <input
                    type="text"
                    className="form-control"
                    id={`stepTitle-${index}`}
                    value={step.title}
                    onChange={(e) => handleStepChange(index, 'title', e.target.value)}
                    required
                  />
                </div>

                {/* N·ªôi dung b∆∞·ªõc */}
                <div className="mb-2">
                  <label htmlFor={`stepContent-${index}`} className="form-label">N·ªôi dung b∆∞·ªõc</label>
                  <textarea
                    className="form-control"
                    id={`stepContent-${index}`}
                    value={step.content}
                    onChange={(e) => handleStepChange(index, 'content', e.target.value)}
                    rows="5"
                    placeholder="Nh·∫≠p n·ªôi dung, c√≥ th·ªÉ nh·∫•n Enter ƒë·ªÉ xu·ªëng d√≤ng"
                  />
                </div>

                {/* Input T·ªáp Media cho B∆∞·ªõc h·ªçc (t·ª± ƒë·ªông nh·∫≠n di·ªán lo·∫°i) */}
                <div className="row g-2">
                  <div className="col-md-12">
                    <label htmlFor={`stepMedia-${index}`} className="form-label">
                      T·ªáp media
                      {/* Hi·ªÉn th·ªã lo·∫°i media ƒë√£ t·ª± ƒë·ªông nh·∫≠n di·ªán */}
                      {step.mediaType && ` (${step.mediaType.toUpperCase()})`}
                      {!step.mediaType && ` (Ch∆∞a ch·ªçn)`}
                    </label>
                    <input
                      type="file"
                      className="form-control"
                      id={`stepMedia-${index}`}
                      accept="video/*,image/*,audio/*" // Ch·∫•p nh·∫≠n t·∫•t c·∫£ c√°c lo·∫°i media
                      onChange={(e) => {
                        const file = e.target.files[0];
                        if (file) {
                          // G·ªçi handleUpload v·ªõi ch·ªâ s·ªë b∆∞·ªõc ƒë·ªÉ c·∫≠p nh·∫≠t ƒë√∫ng step
                          handleUpload(file, index);
                        }
                      }}
                    />
                    {step.mediaUrl && (
                      <small className="text-muted d-block mt-1">
                        URL: {step.mediaUrl}
                      </small>
                    )}
                    {/* Hi·ªÉn th·ªã preview c·ªßa media cho b∆∞·ªõc */}
                    {step.mediaUrl && !uploading && (
                      <div className="mt-2 text-center">
                        {step.mediaType === 'video' && (
                          <video controls src={step.mediaUrl} style={{ maxWidth: '100%', maxHeight: '250px', borderRadius: '8px' }} />
                        )}
                        {step.mediaType === 'audio' && (
                          <audio controls src={step.mediaUrl} style={{ maxWidth: '100%', borderRadius: '8px' }} />
                        )}
                        {step.mediaType === 'photo' && (
                          <img src={step.mediaUrl} alt="Media Preview" style={{ maxWidth: '100%', maxHeight: '250px', borderRadius: '8px', objectFit: 'contain' }} />
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}

            {/* N√∫t th√™m b∆∞·ªõc */}
            <button
              type="button"
              className="btn btn-outline-secondary mb-4"
              onClick={addStep}
            >
              + Th√™m b∆∞·ªõc h·ªçc
            </button>

            {/* N√∫t t·∫°o b√†i h·ªçc */}
            <button
              type="submit"
              className="btn btn-primary w-100"
              disabled={uploading}
            >
              {uploading ? '‚è≥ ƒêang upload...' : 'üöÄ T·∫°o b√†i h·ªçc'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default CreateLesson;