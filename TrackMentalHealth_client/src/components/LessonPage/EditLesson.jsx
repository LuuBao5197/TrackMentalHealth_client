import React, { useState, useEffect } from 'react';
import { useFormik } from 'formik';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';
import { jwtDecode } from 'jwt-decode';

const EditLesson = () => {
    const { lessonId } = useParams();
    const navigate = useNavigate();
    const [steps, setSteps] = useState([]);
    const [uploading, setUploading] = useState(false);
    const [lessonDataFetched, setLessonDataFetched] = useState(null); // L∆∞u d·ªØ li·ªáu b√†i h·ªçc g·ªëc ƒë√£ fetch

    const token = localStorage.getItem('token');
    let userId = null; // ID c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p

    if (token) {
        try {
            const decoded = jwtDecode(token);
            userId = decoded.contentCreatorId;
        } catch (error) {
            console.error('‚ùå Token kh√¥ng h·ª£p l·ªá:', error);
        }
    }

    const formik = useFormik({
        initialValues: {
            title: '',
            description: '',
            status: false,
            photo: '',
            // Kh√¥ng c·∫ßn createdAt, updatedAt ·ªü ƒë√¢y v√¨ s·∫Ω l·∫•y t·ª´ lessonDataFetched
        },
        onSubmit: async (values) => {
            const now = new Date().toISOString(); // Th·ªùi ƒëi·ªÉm hi·ªán t·∫°i cho updatedAt

            // ƒê·∫£m b·∫£o lessonDataFetched ƒë√£ c√≥ d·ªØ li·ªáu ƒë·ªÉ l·∫•y createdAt g·ªëc
            if (!lessonDataFetched) {
                alert('‚ùå L·ªói: Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu b√†i h·ªçc g·ªëc ƒë·ªÉ c·∫≠p nh·∫≠t.');
                return;
            }

            const lessonToSubmit = {
                id: lessonId, // B·∫Øt bu·ªôc ph·∫£i c√≥ ID ƒë·ªÉ backend bi·∫øt ƒë√¢y l√† thao t√°c c·∫≠p nh·∫≠t
                title: values.title,
                description: values.description,
                status: values.status.toString(),
                photo: values.photo, // URL ·∫£nh ƒë·∫°i di·ªán (c√≥ th·ªÉ l√† ·∫£nh c≈© n·∫øu kh√¥ng ƒë·ªïi, ho·∫∑c ·∫£nh m·ªõi)
                
                // L·∫•y createdAt g·ªëc t·ª´ d·ªØ li·ªáu ƒë√£ fetch
                createdAt: lessonDataFetched.createdAt, 
                // C·∫≠p nh·∫≠t updatedAt th√†nh th·ªùi ƒëi·ªÉm hi·ªán t·∫°i
                updatedAt: now, 
                // Gi·ªØ nguy√™n ng∆∞·ªùi t·∫°o ban ƒë·∫ßu (quan tr·ªçng!)
                createdBy: lessonDataFetched.createdBy, // HO·∫∂C userId n·∫øu b·∫°n mu·ªën c·∫≠p nh·∫≠t ng∆∞·ªùi s·ª≠a cu·ªëi c√πng

                lessonSteps: steps.map((step, index) => {
                    // L·∫•y ID b∆∞·ªõc g·ªëc n·∫øu c√≥ ƒë·ªÉ backend c·∫≠p nh·∫≠t ƒë√∫ng b∆∞·ªõc,
                    // n·∫øu l√† b∆∞·ªõc m·ªõi th√™m th√¨ ID s·∫Ω l√† undefined (ho·∫∑c null t√πy backend)
                    const originalStep = lessonDataFetched.lessonSteps?.find(s => s.stepNumber === (index + 1));
                    return {
                        id: originalStep ? originalStep.id : null, // G·ª≠i ID c·ªßa b∆∞·ªõc n·∫øu c√≥ (cho c·∫≠p nh·∫≠t)
                        stepNumber: index + 1,
                        title: step.title,
                        content: step.content,
                        mediaType: step.mediaType,
                        mediaUrl: step.mediaUrl,
                    };
                }),
            };

            console.log('üîç D·ªØ li·ªáu g·ª≠i ƒëi ƒë·ªÉ c·∫≠p nh·∫≠t b√†i h·ªçc:', lessonToSubmit);

            try {
                // S·ª≠ d·ª•ng axios.put n·∫øu API c·ªßa b·∫°n ƒë∆∞·ª£c thi·∫øt k·∫ø cho PUT ƒë·ªÉ c·∫≠p nh·∫≠t
                // N·∫øu backend c·ªßa b·∫°n API save c√≥ th·ªÉ x·ª≠ l√Ω c·∫£ t·∫°o v√† c·∫≠p nh·∫≠t d·ª±a tr√™n ID (nh∆∞ b·∫°n ƒëang d√πng),
                // th√¨ axios.post c≈©ng ƒë∆∞·ª£c, nh∆∞ng PUT th∆∞·ªùng r√µ r√†ng h∆°n cho thao t√°c update.
                await axios.post('http://localhost:9999/api/lesson/save', lessonToSubmit); 
                alert('‚úÖ B√†i h·ªçc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!');
            } catch (error) {
                console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t:', error.response?.data || error.message);
                alert('‚ùå C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t b√†i h·ªçc.');
            }
        },
    });

    useEffect(() => {
        const fetchLesson = async () => {
            if (!lessonId) {
                // N·∫øu kh√¥ng c√≥ ID b√†i h·ªçc, c√≥ th·ªÉ chuy·ªÉn h∆∞·ªõng ho·∫∑c hi·ªÉn th·ªã th√¥ng b√°o
                navigate('/lessons'); 
                return;
            }
            try {
                const res = await axios.get(`http://localhost:9999/api/lesson/${lessonId}`);
                const fetchedLesson = res.data;

                // G√°n d·ªØ li·ªáu v√†o formik
                formik.setValues({
                    title: fetchedLesson.title || '',
                    description: fetchedLesson.description || '',
                    status: fetchedLesson.status === 'true' || fetchedLesson.status === true,
                    photo: fetchedLesson.photo || '',
                    // KH√îNG c·∫ßn set createdAt, updatedAt v√†o formik values
                });

                setLessonDataFetched(fetchedLesson); // L∆ØU TO√ÄN B·ªò D·ªÆ LI·ªÜU G·ªêC ƒê·ªÇ L·∫§Y createdAt
                setSteps(fetchedLesson.lessonSteps || []); // C·∫≠p nh·∫≠t steps state
            } catch (err) {
                console.error('‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√†i h·ªçc:', err.response?.data || err.message);
                alert('‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√†i h·ªçc. Vui l√≤ng ki·ªÉm tra ID ho·∫∑c k·∫øt n·ªëi.');
                navigate('/lessons'); 
            }
        };

        fetchLesson();
    }, [lessonId, navigate]); // Th√™m navigate v√†o dependency array

    const handleStepChange = (index, field, value) => {
        const updatedSteps = [...steps];
        updatedSteps[index][field] = value;
        setSteps(updatedSteps);
    };

    const addStep = () => {
        setSteps([...steps, { title: '', content: '', mediaType: '', mediaUrl: '' }]);
    };

    const handleUpload = async (file, stepIndex = -1, onSuccess) => {
        if (!file) return;

        const formData = new FormData();
        formData.append('file', file);

        setUploading(true);
        try {
            const res = await axios.post('http://localhost:9999/api/upload', formData, {
                headers: { 'Content-Type': 'multipart/form-data' },
            });
            const url = res.data.url;

            let detectedMediaType = '';
            if (file.type.startsWith('image/')) {
                detectedMediaType = 'photo';
            } else if (file.type.startsWith('video/')) {
                detectedMediaType = 'video';
            } else if (file.type.startsWith('audio/')) {
                detectedMediaType = 'audio';
            } else {
                alert('Lo·∫°i t·ªáp kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng ch·ªçn h√¨nh ·∫£nh, video ho·∫∑c √¢m thanh.');
                setUploading(false);
                return;
            }

            if (stepIndex !== -1) {
                const updatedSteps = [...steps];
                updatedSteps[stepIndex].mediaUrl = url;
                updatedSteps[stepIndex].mediaType = detectedMediaType;
                setSteps(updatedSteps);
            } else {
                onSuccess(url); // C·∫≠p nh·∫≠t formik value cho ·∫£nh ƒë·∫°i di·ªán
            }
        } catch (err) {
            console.error('‚ùå Upload th·∫•t b·∫°i:', err.response?.data || err.message);
            alert('‚ùå Upload th·∫•t b·∫°i!');
        } finally {
            setUploading(false);
        }
    };

    return (
        <div className="container my-5" style={{ maxWidth: '850px' }}>
            <div className="card shadow">
                <div className="card-body p-4">
                    <h2 className="mb-4 text-primary">
                        ‚úèÔ∏è {lessonId ? 'Ch·ªânh s·ª≠a b√†i h·ªçc' : 'T·∫°o b√†i h·ªçc m·ªõi'}
                    </h2>

                    <form onSubmit={formik.handleSubmit}>
                        <div className="mb-3">
                            <label htmlFor="title" className="form-label">Ti√™u ƒë·ªÅ b√†i h·ªçc</label>
                            <input
                                type="text"
                                className="form-control"
                                id="title"
                                name="title"
                                onChange={formik.handleChange}
                                value={formik.values.title}
                                required
                            />
                        </div>

                        <div className="mb-3">
                            <label htmlFor="description" className="form-label">M√¥ t·∫£</label>
                            <textarea
                                className="form-control"
                                id="description"
                                name="description"
                                rows="4"
                                onChange={formik.handleChange}
                                value={formik.values.description}
                            />
                        </div>

                        <div className="mb-3">
                            <label className="form-label">·∫¢nh ƒë·∫°i di·ªán b√†i h·ªçc</label>
                            {/* Hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i t·ª´ DB n·∫øu c√≥ v√† ch∆∞a c√≥ ·∫£nh m·ªõi ƒë∆∞·ª£c ch·ªçn */}
                            {lessonDataFetched?.photo && !formik.values.photo && (
                                <div className="mb-2">
                                    <strong>·∫¢nh hi·ªán t·∫°i:</strong>
                                    <div className="mt-1">
                                        <img
                                            src={lessonDataFetched.photo}
                                            alt="·∫¢nh hi·ªán t·∫°i"
                                            style={{ maxHeight: '150px', borderRadius: '8px', objectFit: 'cover' }}
                                        />
                                    </div>
                                </div>
                            )}

                            {/* Hi·ªÉn th·ªã ·∫£nh m·ªõi ƒë√£ upload */}
                            {formik.values.photo && (
                                <div className="mb-2">
                                    <strong>·∫¢nh m·ªõi:</strong>
                                    <div className="mt-1">
                                        <img
                                            src={formik.values.photo}
                                            alt="·∫¢nh m·ªõi"
                                            style={{ maxHeight: '150px', borderRadius: '8px', objectFit: 'cover' }}
                                        />
                                    </div>
                                </div>
                            )}

                            <input
                                type="file"
                                className="form-control mt-2"
                                accept="image/*"
                                onChange={(e) => {
                                    const file = e.target.files[0];
                                    if (file) {
                                        handleUpload(file, -1, (url) => formik.setFieldValue('photo', url));
                                    }
                                }}
                            />
                        </div>

                        <div className="form-check mb-4">
                            <input
                                className="form-check-input"
                                type="checkbox"
                                id="statusCheck"
                                name="status"
                                onChange={formik.handleChange}
                                checked={formik.values.status}
                            />
                            <label className="form-check-label" htmlFor="statusCheck">
                                K√≠ch ho·∫°t b√†i h·ªçc
                            </label>
                        </div>

                        <hr />
                        <h4 className="text-secondary mb-3">üìö C√°c B∆∞·ªõc H·ªçc</h4>

                        {steps.map((step, index) => (
                            <div key={index} className="border rounded p-3 mb-4 bg-light">
                                <h5 className="mb-3">B∆∞·ªõc {index + 1}</h5>

                                <div className="mb-2">
                                    <label htmlFor={`stepTitle-${index}`} className="form-label">Ti√™u ƒë·ªÅ b∆∞·ªõc</label>
                                    <input
                                        type="text"
                                        className="form-control"
                                        id={`stepTitle-${index}`}
                                        value={step.title}
                                        onChange={(e) => handleStepChange(index, 'title', e.target.value)}
                                        required
                                    />
                                </div>

                                <div className="mb-2">
                                    <label htmlFor={`stepContent-${index}`} className="form-label">N·ªôi dung b∆∞·ªõc</label>
                                    <textarea
                                        className="form-control"
                                        id={`stepContent-${index}`}
                                        value={step.content}
                                        onChange={(e) => handleStepChange(index, 'content', e.target.value)}
                                        rows="5"
                                    />
                                </div>

                                <div className="row g-2">
                                    <div className="col-md-12">
                                        <label htmlFor={`stepMedia-${index}`} className="form-label">
                                            T·ªáp media ({step.mediaType ? step.mediaType.toUpperCase() : 'Ch∆∞a ch·ªçn'})
                                        </label>
                                        {/* Hi·ªÉn th·ªã media hi·ªán t·∫°i t·ª´ DB n·∫øu c√≥ v√† ch∆∞a c√≥ media m·ªõi ƒë∆∞·ª£c ch·ªçn */}
                                        {lessonDataFetched?.lessonSteps?.[index]?.mediaUrl && !step.mediaUrl && (
                                            <div className="mb-2">
                                                <strong>Media hi·ªán t·∫°i:</strong>
                                                <div className="mt-1 text-center">
                                                    {lessonDataFetched.lessonSteps[index].mediaType === 'video' && (
                                                        <video controls src={lessonDataFetched.lessonSteps[index].mediaUrl} style={{ maxWidth: '100%', maxHeight: '250px', borderRadius: '8px' }} />
                                                    )}
                                                    {lessonDataFetched.lessonSteps[index].mediaType === 'audio' && (
                                                        <audio controls src={lessonDataFetched.lessonSteps[index].mediaUrl} style={{ maxWidth: '100%', borderRadius: '8px' }} />
                                                    )}
                                                    {lessonDataFetched.lessonSteps[index].mediaType === 'photo' && (
                                                        <img src={lessonDataFetched.lessonSteps[index].mediaUrl} alt="Current Media" style={{ maxWidth: '100%', maxHeight: '250px', borderRadius: '8px', objectFit: 'contain' }} />
                                                    )}
                                                </div>
                                            </div>
                                        )}
                                        
                                        <input
                                            type="file"
                                            className="form-control"
                                            id={`stepMedia-${index}`}
                                            accept="video/*,image/*,audio/*"
                                            onChange={(e) => {
                                                const file = e.target.files[0];
                                                if (file) {
                                                    handleUpload(file, index);
                                                }
                                            }}
                                        />
                                        {step.mediaUrl && (
                                            <small className="text-muted d-block mt-1">
                                                URL: {step.mediaUrl}
                                            </small>
                                        )}
                                        {step.mediaUrl && !uploading && (
                                            <div className="mt-2 text-center">
                                                {step.mediaType === 'video' && (
                                                    <video controls src={step.mediaUrl} style={{ maxWidth: '100%', maxHeight: '250px', borderRadius: '8px' }} />
                                                )}
                                                {step.mediaType === 'audio' && (
                                                    <audio controls src={step.mediaUrl} style={{ maxWidth: '100%', borderRadius: '8px' }} />
                                                )}
                                                {step.mediaType === 'photo' && (
                                                    <img src={step.mediaUrl} alt="Media Preview" style={{ maxWidth: '100%', maxHeight: '250px', borderRadius: '8px', objectFit: 'contain' }} />
                                                )}
                                            </div>
                                        )}
                                    </div>
                                </div>
                            </div>
                        ))}

                        <button
                            type="button"
                            className="btn btn-outline-secondary mb-4"
                            onClick={addStep}
                        >
                            + Th√™m b∆∞·ªõc h·ªçc
                        </button>

                        <div className="d-grid">
                            <button
                                type="submit"
                                className="btn btn-primary"
                                disabled={uploading}
                            >
                                {uploading ? 'ƒêang t·∫£i l√™n...' : 'üíæ L∆∞u b√†i h·ªçc'}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
};

export default EditLesson;